# -*- coding: utf-8 -*-
#
# Copyright (C) 2015-2016, OVH SAS
#
# This file is part of Cerberus-core.
#
# Cerberus-core is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


"""
    Defined Cloudflare implementation of CDNRequestWorkflowBase
"""

import json

from collections import OrderedDict

from abuse.models import Defendant, Service
from utils import utils
from worker.workflows.cdnrequest.abstract import CDNRequestWorkflowBase


REDIS_QUEUE = 'cdnrequest:cloudflare:request'


class CloudflareRequest(CDNRequestWorkflowBase):
    """
        This class interact with Cloudflare to request real backend IP for a domain name
    """
    def identify(self, report, domain_to_request):
        """
            identify if the `abuse.models.Report` and the domain_to_request match the CDN provider

            :param `abuse.models.Report` report: A Cerberus report instance
            :param str domain_to_request: the domain name to request
            :return: If the workflow match
            :rtype: bool
        """
        if not domain_to_request:
            return False

        ips = utils.get_ips_from_fqdn(domain_to_request)
        if not ips:
            return False

        for ip_addr in ips:
            if utils.get_ip_network(ip_addr) == 'cloudflare':
                return True

        return False

    def apply(self, report, domain_to_request):
        """
            Request backend IP for given domain to CDN`

            :param `abuse.models.Report` report: A Cerberus report instance
            :param str domain_to_request: the domain name to request
            :return: If the workflow is applied
            :rtype: bool
        """
        defendant, service = get_if_cached(domain_to_request)
        if all((defendant, service)):


        # cloudflare_ip_request


def get_if_cached(domain_to_request):

    defendant = service = None

    for entry in utils.redis.lrange(REDIS_QUEUE, 0, -1):
        entry = json.loads(entry, object_pairs_hook=OrderedDict)
        if entry['domain'] == domain_to_request:
            defendant = Defendant.objects.filter(
                id=entry['defendant_id']
            ).last()
            service = Service.objects.filter(
                id=entry['service_id']
            ).last()
            break

    return defendant, service



